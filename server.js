const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const morgan  = require('morgan')
const compression = require('compression')
const microcache = require('route-cache')
const bodyParser = require('body-parser')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const opn = require('opn')
const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const request = require('request')
const routes = require('./server/routes')
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./yatra_asi'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
var templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./yatra_asi/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./yatra_asi/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use('/yatra_asi', serve('./yatra_asi', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())
app.use('/asi',routes)
app.use(bodyParser.json())

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))
app.use(morgan(':remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"'))

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'ASI Monuments', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}


app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

app.post('/newMessages', function (req, res) {
  var data = req.body;
  if(!data.messages[0].fromMe && data.messages[0].type == 'chat'){
       var url = 'https://eu1.whatsapp.chat-api.com/instance889/message?token=kho9m25qwhvygj66';
       var askedSeats = data.messages[0].body.split(',')
        var text = ""
        var seatInfo = fs.readFileSync('seatFJson.json', 'utf8')
        seatInfo= seatInfo=="" ? {} :JSON.parse(seatInfo)
       for(var i=0;i<askedSeats.length;i++){
        
         var seatNo = askedSeats[i].substring(0, 1).toUpperCase()+'-'+askedSeats[i].substring(1, askedSeats[i].length).toUpperCase()
         if(seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`] && seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`].available){
           text = text+`Your Seat ${askedSeats[i]} has been confirmed\nChoose hotels in your visiting city.\n*Check below url*\n\nhttps://www.yatra.com/hotels/hotels-in-delhi\n`
         }else if(seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`] && !seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`].available){
           text =text+`${askedSeats[i].toUpperCase()} has been booked by someone else on ${seatInfo.data.vendor} ${seatInfo.data.flightNumber} from ${seatInfo.data.originCity} to ${seatInfo.data.destinationCity} at ${seatInfo.data.timings}.\n\nPlease provide your preferred flight no eg:1C,2B\n\n\nðŸ˜¢ - Unavailable\nðŸ˜Š -  Available Free Seats\n\n   *Available Paid Seats*:\nðŸ¤— - 3XL Seats @ â‚¹ 500\nðŸ¤‘ - 6 Paid Seats @ â‚¹ 300\nðŸ˜Ž - 14 Paid Seats @ â‚¹ 200\n\n   *PLANE'S FRONT*\n\n${text}\n\n   *PLANE'S BACK*\n` // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
         }else {
           text = text +`You have given wrong format ${askedSeats[i].toUpperCase()} .Please select in following format\n\n*A01*  *B10*\n`
         }
       }
       var url = 'https://eu1.whatsapp.chat-api.com/instance889/message?token=kho9m25qwhvygj66';
       var data = {
         phone: data.messages[0].chatId.split('@')[0], // Receivers phone
         body: text, // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
     };
     request({
         url: url,
         method: "POST",
         json: data
     });//Response does not matter
      //  for(var i=0; i < askedSeats.length ; i++){
      //   var seatNo = askedSeats[i].substring(0, 1).toUpperCase()+'-'+askedSeats[i].substring(1, askedSeats[i].length).toUpperCase()
      //   if(seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`] && seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`].available){
      //        seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`].available = false
      //        var data = {
      //          phone: data.messages[0].chatId.split('@')[0], // Receivers phone
      //          body: `Your Seat ${askedSeats[i]} has been confirmed\nChoose hotels in your visiting city.\n*Check below url*\n\nhttps://www.yatra.com/hotels/hotels-in-delhi`, // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
      //      };
      //      request({
      //          url: url,
      //          method: "POST",
      //          json: data
      //      });//Response does not matter
      //   } else if(seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`] && !seatMapUI.data.seatMatrix[`SeatNo_${seatNo}`].available){
      //    let t = fs.readFileSync('userProf.json', 'utf8')
      //    var text = bookTicket()
      //    t= t=="" ? {} :JSON.parse(t)
      //    var seatInfo = fs.readFileSync('seatFJson.json', 'utf8')
      //    seatInfo= seatInfo=="" ? {} :JSON.parse(seatInfo)
      //     var url = 'https://eu1.whatsapp.chat-api.com/instance889/message?token=kho9m25qwhvygj66';
      //      var data = {
      //        phone: data.messages[0].chatId.split('@')[0], // Receivers phone
      //        body: `This seat has been booked by someone else on ${seatInfo.data.vendor} ${seatInfo.data.flightNumber} from ${seatInfo.data.originCity} to ${seatInfo.data.destinationCity} at ${seatInfo.data.timings}.\n\nPlease provide your preferred flight no eg:1C,2B\n\n\nðŸ˜¢ - Unavailable\nðŸ˜Š -  Available Free Seats\n\n   *Available Paid Seats*:\nðŸ¤— - 3XL Seats @ â‚¹ 500\nðŸ¤‘ - 6 Paid Seats @ â‚¹ 300\nðŸ˜Ž - 14 Paid Seats @ â‚¹ 200\n\n   *PLANE'S FRONT*\n\n${text}\n\n   *PLANE'S BACK*`, // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
      //    };
      //    request({
      //        url: url,
      //        method: "POST",
      //        json: data
      //    });//Response does not matter
      //   }else{
            
      //   }
      //  }
      
  } else if(!data.messages[0].fromMe && data.messages[0].type != 'chat'){
        var url = 'https://eu1.whatsapp.chat-api.com/instance889/message?token=kho9m25qwhvygj66';
        var data = {
          phone: data.messages[0].chatId.split('@')[0], // Receivers phone
          body: 'Please send in the text format', // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
      };
      // Send a request
      request({
          url: url,
          method: "POST",
          json: data
      });//Response does not matter
  }
   
  res.send('Hello')
});

var seatMapUI ;
function bookTicket(){
  var seatInfo = fs.readFileSync('seatFJson.json', 'utf8')
  seatInfo= seatInfo=="" ? {} :JSON.parse(seatInfo)
  seatMapUI =seatInfo
  var text = ""
  var start = 1
  var rows = seatInfo.data.flightInfra.rows
  var column = seatInfo.data.flightInfra.column
  var columnArr = ['A', 'B', 'C', 'D', 'E', 'F']
  var seats = seatInfo.data.seatMatrix
  var len = Object.keys(seats).length
  for (i=0; i <= column; i++) {
    if(i == 0) {
      text = "     "
    }else {
      if(i < column) {
        text = text +"   "+ columnArr[i-1] + "   "
      }else {
        text = text +"   "+ columnArr[i-1] + "\n"
      }
    }
    if(i%3 == 0 && i>0){
      text = text + ""
    }
  }
  for (var keys in seats) {

    if(start%column == 1)
      text = text + keys.split('_')[1].split('-')[1] + "  "

    if(start%column < 6) {
      if(seats[keys].available == true && seats[keys].paidSeat == false) {
          text = text + 'ðŸ˜Š' + "  "
      }else if(seats[keys].available == false) {
        text = text + 'ðŸ˜¢' + "  "
      }else if(seats[keys].available == true && seats[keys].paidSeat == true) {
          if(seats[keys].extraTaxCharges == '200'){
          text = text + 'ðŸ˜Ž' + "  "
          }
          if(seats[keys].extraTaxCharges == '300'){
          text = text + 'ðŸ¤‘' + "  "
          }
          if(seats[keys].extraTaxCharges == '500'){
          text = text + 'ðŸ¤—' + "  "
          }
      }
    }

    if(start%column ==3){
        text = text +"   "
    }

    if(start%column == 0)
      text = text + "\n"

    start = start + 1
  }
  return text
}

app.post('/api/sendWhatsAppWebCheckinNotification', function (req, res) {
  let t = fs.readFileSync('userProf.json', 'utf8')
  var text = bookTicket()
  t= t=="" ? {} :JSON.parse(t)
  var seatInfo = fs.readFileSync('seatFJson.json', 'utf8')
  seatInfo= seatInfo=="" ? {} :JSON.parse(seatInfo)
  for(var i=0 ;i< t.passengerInfo.length;i++){
    var url = 'https://eu1.whatsapp.chat-api.com/instance889/message?token=kho9m25qwhvygj66';
    var data = {
      phone: t.passengerInfo[i].mob, // Receivers phone
      body: `Hi ${t.passengerInfo[i].name},\nSeats are filling fast for your booked flight ${seatInfo.data.vendor} ${t.passengerInfo[i].flightNo} from ${seatInfo.data.originCity} to ${seatInfo.data.destinationCity} at ${seatInfo.data.timings}.\n\nPlease provide your preferred flight no eg:C01,B10\n\n\nðŸ˜¢ - Unavailable\nðŸ˜Š -  Available Free Seats\n\n   *Available Paid Seats*:\nðŸ¤— - 3XL Seats @ â‚¹ 500\nðŸ¤‘ - 6 Paid Seats @ â‚¹ 300\nðŸ˜Ž - 14 Paid Seats @ â‚¹ 200\n\n   *PLANE'S FRONT*\n\n${text}\n\n   *PLANE'S BACK*`, // Ð¡Ð¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ
  };
  request({
      url: url,
      method: "POST",
      json: data
  });//Response does not matter
  }
  res.send('Hello')
});

const port = process.env.PORT || 8282
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
